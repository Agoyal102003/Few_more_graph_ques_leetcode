// Approach 1 -> Brute force -> A little time efficient (67/71 testcases passed)

class Solution {
public:
    void minHeight(int node, int Height, int& maxHeight, vector<int>& vis, vector<vector<int>>& adjList) {
        vis[node] = 1;
        maxHeight = max(maxHeight, Height);  // Update maxHeight with the current height

        for (auto it : adjList[node]) {
            if (!vis[it]) {
                minHeight(it, Height + 1, maxHeight, vis, adjList);  // Recurse with incremented height
            }
        }
    }

    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if (n == 1) return {0};  // Special case for single node

        vector<vector<int>> adjList(n);
        for (int i = 0; i < edges.size(); i++) {
            adjList[edges[i][0]].push_back(edges[i][1]);
            adjList[edges[i][1]].push_back(edges[i][0]);
        }

        vector<int> ans;
        int min_height = INT_MAX;
        unordered_map<int, int> mp;

        for (int i = 0; i < n; i++) {
            vector<int> vis(n, 0);
            int maxHeight = 0;
            minHeight(i, 0, maxHeight, vis, adjList);
            mp[i] = maxHeight;
            min_height = min(min_height, maxHeight);
        }

        for (int i = 0; i < n; i++) {
            if (mp[i] == min_height) {
                ans.push_back(i);
            }
        }

        return ans;
    }
};

// Approach 2 -> 

class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if (n == 1) return {0}; // Special case for a single node
        
        // Step 1: Build the adjacency list and initialize the degree of each node
        vector<vector<int>> adjList(n);
        vector<int> degree(n, 0);
        for (const auto& edge : edges) {
            adjList[edge[0]].push_back(edge[1]);
            adjList[edge[1]].push_back(edge[0]);
            degree[edge[0]]++;
            degree[edge[1]]++;
        }

        // Step 2: Initialize the first layer of leaves
        queue<int> leaves;
        for (int i = 0; i < n; i++) {
            if (degree[i] == 1) leaves.push(i);
        }

        // Step 3: Trim the leaves until we reach the core nodes (1 or 2 nodes left)
        int remainingNodes = n;
        while (remainingNodes > 2) {
            int leavesCount = leaves.size();
            remainingNodes -= leavesCount;

            for (int i = 0; i < leavesCount; i++) {
                int leaf = leaves.front();
                leaves.pop();

                // Reduce the degree of each neighbor and add new leaves to the queue
                for (int neighbor : adjList[leaf]) {
                    degree[neighbor]--;
                    if (degree[neighbor] == 1) leaves.push(neighbor);
                }
            }
        }

        // The remaining nodes in the queue are the roots of MHTs
        vector<int> result;
        while (!leaves.empty()) {
            result.push_back(leaves.front());
            leaves.pop();
        }

        return result;
    }
};
