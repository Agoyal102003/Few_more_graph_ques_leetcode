// Approach 1 -> passed 135/139 testcases
Its a little inefficient as many overlapping subprobblems are there we will memoization in this

class Solution {
public:
    int countIncreasingPath(int row, int col, vector<vector<int>>& matrix)
    {
        int n=matrix.size();
        int m=matrix[0].size();

        int dirRow[]={-1, 0, +1, 0};
        int dirCol[]={0, +1, 0, -1};
        int max_length=1;

        for(int i=0; i<4; i++)
        {
            int nrow = row + dirRow[i];
            int ncol = col + dirCol[i];

            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m &&
            matrix[nrow][ncol]>matrix[row][col])
            {
                max_length = max(max_length, 1+ countIncreasingPath(nrow, ncol, matrix));
            }
        }
        return max_length;
    }

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int maxlength=0;
        int n=matrix.size();
        int m=matrix[0].size();
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                int pathLength=countIncreasingPath(i, j, matrix);
                maxlength=max(maxlength, pathLength);
            }
        }
        return maxlength;
    }
};

// Approach 2 -> after memoization 

class Solution {
public:
    int countIncreasingPath(int row, int col, vector<vector<int>>& matrix,
    vector<vector<int>>& dp)
    {
        int n=matrix.size();
        int m=matrix[0].size();
        if(dp[row][col]!=-1) return dp[row][col];

        int dirRow[]={-1, 0, +1, 0};
        int dirCol[]={0, +1, 0, -1};
        int max_length=1;

        for(int i=0; i<4; i++)
        {
            int nrow = row + dirRow[i];
            int ncol = col + dirCol[i];

            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m &&
            matrix[nrow][ncol]>matrix[row][col])
            {
                max_length = max(max_length, 1+ countIncreasingPath(nrow, ncol, matrix, dp));
            }
        }
        return dp[row][col]=max_length;
    }

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int maxlength=0;
        int n=matrix.size();
        int m=matrix[0].size();
        vector<vector<int>> dp(n, vector<int>(m, -1));
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                int pathLength=countIncreasingPath(i, j, matrix, dp);
                maxlength=max(maxlength, pathLength);
            }
        }
        return maxlength;
    }
};
