// Approach 1 ->

class Solution {
public:
    void dfs(int node, vector<vector<int>>& graph, vector<int>& path, 
             vector<vector<int>>& result) {
        path.push_back(node);
        
        // If we reached the target node (n-1), add the path to the result
        if (node == graph.size() - 1) {
            result.push_back(path);
        } else {
            // Explore all neighbors of the current node
            for (int neighbor : graph[node]) {
                dfs(neighbor, graph, path, result);
            }
        }
        
        // Backtrack by removing the current node from the path
        path.pop_back();
    }

    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector<int>> result;
        vector<int> path;
        
        // Start DFS from node 0
        dfs(0, graph, path, result);
        
        return result;
    }
};
